services:
#  frontend:
#    #image: ghcr.io/chatgut/frontend:0.0.3
#    build:
#      context: .
#    ports:
#      - "8080:8080"
  authservice:
    image: ghcr.io/chatgut/authservice2:latest
    depends_on:
      - authservice-mysql
    container_name: authservice
    ports:
      - "8003:8080"
    environment:
      DB_URL: authservice-mysql:3306/authservice-mysql
      DB_USER: developer
      DB_PASS: password
  authservice-mysql:
    image: 'mysql:latest'
    container_name: authservice-mysql
    volumes:
      - db_auth:/var/lib/mysql
    environment:
      MYSQL_DATABASE: authservice-mysql
      MYSQL_USER: developer
      MYSQL_PASSWORD: password
      MYSQL_ROOT_HOST: '%'
      MYSQL_ROOT_PASSWORD: password
      MYSQL_HOST: '%'
    ports:
      - "3307:3307"
  app:
    image: ghcr.io/chatgut/micropostservice:main
    container_name: postService
    restart: on-failure
    depends_on:
      - mongodb
      - rabbitMQ
    environment:
      ROCKET_DATABASES: '{postservice={url="mongodb://dbMongoDB:27017"}}'
      ROCKET_RABBIT_HOST: "amqp://QueueRabbitMQ:5672"
    ports:
      - "8000:8000"
  urlshortener:
    image: erikasignal/url-shortener-service:latest
    environment:
      SPRING_DATA_MONGODB_HOST: mongodb
    ports:
      - "8004:8080"

  mongodb:
    image: 'mongo:latest'
    container_name: dbMongoDB
    volumes:
      - dbData:/var/lib/mongodb
    ports:
      - "27017:27017"

  rabbitMQ:
    image: 'rabbitmq:3-management'
    container_name: QueueRabbitMQ
    volumes:
      - dbData:/var/lib/rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
  usersapp:
    image: ghcr.io/chatgut/userservice:1.0
    container_name: userservice
    ports:
      - "8002:8002"
    depends_on:
      - dbUsers
    environment:
      DB_URL: jdbc:mysql://dbUsers:3306/userService
      DB_USER: developer
      DB_PASSWORD: password

  dbUsers:
    image: mysql:latest
    environment:
      MYSQL_ROOT_HOST: '%'
      MYSQL_ROOT_USER: root
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: userService
      MYSQL_PASSWORD: password
      MYSQL_USER: developer
    volumes:
      - dbUsers:/var/lib/mysql

  worthReading:
   image: ghcr.io/chatgut/worthreadingservice:master
   container_name: worthreadingservice
   depends_on:
     mysql:
       condition: service_healthy
   environment:
     DB_URL: jdbc:mysql://mysql:3306/demo
     DB_USER: developer
     DB_PASS: password
   ports:
     - "8005:8005"

  mysql:
    image: 'mysql:latest'
    container_name: mysqlDb
    volumes:
      - dbWR:/var/lib/mysql
    environment:
      MYSQL_DATABASE: demo
      MYSQL_USER: developer
      MYSQL_PASSWORD: password
      MYSQL_ROOT_HOST: '%'
      MYSQL_ROOT_PASSWORD: password
    ports:
      - '3306:3306'
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER -p$$MYSQL_PASSWORD" ]
      interval: 30s
      timeout: 10s
      retries: 5
  imageservice:
    image: ghcr.io/chatgut/imageservicebov:sha-925024f
    depends_on:
      - imageservice-mysql
    ports:
      - "8001:8001"
    environment:
      DB_URL: imageservice-mysql:3306/imageservice-mysql
      DB_USER: developer
      DB_PASS: password
  imageservice-mysql:
    image: "mysql:latest"
    container_name: imageservice-mysql
    volumes:
      - db_mysql:/var/lib/mysql
    environment:
      MYSQL_ROOT_HOST: "%"
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: imageservice-mysql
      MYSQL_USER: developer
      MYSQL_PASSWORD: password
      MYSQL_HOST: '%'
    ports:
      - "3309:3306"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.4
    container_name: elasticsearch-container
    ports:
      - 9200:9200
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false

  searchservice:
    image: mattan41/chatgut:v1.0
    container_name: searchService
    restart: on-failure
    depends_on:
      - rabbitMQ
      - elasticsearch
    ports:
      - "8004:8004"

volumes:
  db_auth:
  dbUsers:
  dbData:
  dbWR:
  db_mysql:
